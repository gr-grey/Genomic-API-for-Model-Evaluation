Bootstrap: docker
From: python:3.13-slim
Stage: build

%files
    dreamRNN_API_script/dreamRNN_predict.py /dreamRNN_API_script/dreamRNN_predict.py
    dreamRNN_API_script/prixfixe /dreamRNN_API_script/prixfixe
    dreamRNN_API_script/dream_rnn_k562_model_weight/model_best.pth /dreamRNN_API_script/dream_rnn_k562_model_weight/model_best.pth
    script_and_utils/predictor_API_clean_apptainer.py /predictor_container_apptainer/predictor_API_clean_apptainer.py
    script_and_utils/api_preprocessing_utils.py /predictor_container_apptainer/api_preprocessing_utils.py
    script_and_utils/error_message_functions_updated.py /predictor_container_apptainer/error_message_functions_updated.py
    script_and_utils/predictor_help_message.json /predictor_container_apptainer/predictor_help_message.json
    ../../dreamRNN_environment.yml /dreamRNN_environment.yml

%environment
    export LC_ALL=C
    export PATH="/opt/conda/envs/dream/bin:$PATH"
    export LD_LIBRARY_PATH="/opt/conda/envs/dream/lib:$LD_LIBRARY_PATH"

%post
    echo "Installing system dependencies..."
    apt-get update && \
    apt-get install -y --no-install-recommends wget bzip2 ca-certificates && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

    echo "Setting up Miniconda..."
    mkdir -p /opt && \
    wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh && \
    bash /tmp/miniconda.sh -b -p /opt/conda && \
    rm -rf /tmp/miniconda.sh

    echo "Initializing Conda..."
    export PATH="/opt/conda/bin:$PATH"
    . /opt/conda/etc/profile.d/conda.sh

    echo "Creating Conda environment 'dream'..."
    conda env create -f /dreamRNN_environment.yml && \

    echo "Verifying Conda environment creation..."
    if ! conda env list | grep -q dream; then
        echo "Error: Conda environment 'dream' was not created successfully."
        exit 1
    fi

    echo "Setting permissions..."
    chmod -R 755 /dreamRNN_API_script /predictor_container_apptainer /opt/conda
    chmod +x /opt/conda/envs/dream/bin/python3

    echo "Cleaning up temporary files..."
    rm -rf /dreamRNN_environment.yml
    conda clean --all --yes

%runscript
    export PATH="/opt/conda/envs/dream/bin:$PATH"
    exec python3 /predictor_container_apptainer/predictor_API_clean_apptainer.py "$@"

%startscript
    export PATH="/opt/conda/envs/dream/bin:$PATH"
    exec python3 /predictor_container_apptainer/predictor_API_clean_apptainer.py "$@"

%labels
    Author "Satyam Priyadarshi"
    Version "2.2"
    Description "This container is the Predictor set up for Genomic API for Model Evaluation using the DREAM-RNN model."

%help
    This container for Predictor includes:
    - Predictor script for sequence processing and error handling.
    - Integrated Dream-RNN model with its dependencies and DREAM conda environment created using `dreamRNN_environment.yml`.
    - Pre-trained model weights (`model_best.pth`) for predictions.
    - Support scripts like `api_preprocessing_utils.py`, `error_message_functions_updated.py`, and `predictor_help_message.json`.

    Usage:
    If you are building the container using this definition file, ensure you have the following directory structure on the host:
    ```
    /path/to/DREAM_RNN/src/predictor_container_apptainer/
    ├── predictor.def
    ├── predictor.sif
    ├── dreamRNN_API_script
    │   ├── dreamRNN_predict.py
    │   ├── dream_rnn_k562_model_weight
    │   │   └── model_best.pth
    │   └── prixfixe/
    ├── script_and_utils
    │   ├── api_preprocessing_utils.py
    │   ├── error_message_functions_updated.py
    │   ├── predictor_API_clean_apptainer.py
    │   └── predictor_help_message.json
    ```
    
    Build the container (SIF)
    ```
    apptainer build predictor.sif predictor.def
    ```

    Run the container
    ```
    apptainer run predictor.sif HOST PORT
    ```

    Details:
    - The container receives data via a TCP socket and doesn’t require mounted data directories.
    - Replace `HOST` and `PORT` with the server and port configuration for the evaluator.

    Purpose:
    - Facilitates genomic model evaluation and prediction using the DREAM-RNN framework.
    - It is designed to seamlessly integrate with other tools via API endpoints.

    Example Command:
    ```
    apptainer run predictor.sif 172.16.47.244 5000
    ```

    Arguments:
    1. `HOST`: IP address or hostname of the Predictor server.
    2. `PORT`: Port number the Predictor is listening on.